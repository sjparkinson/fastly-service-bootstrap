version: 2

jobs:
  validate_terraform:
    docker:
      - image: hashicorp/terraform
    steps:
      - checkout
      - run:
          name: Validate Terraform Formatting
          command: "[ -z \"$(terraform fmt -write=false)\" ] || { terraform fmt -write=false -diff; exit 1; }"
  
  validate_node:
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - restore_cache:
          key: npm-dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: npm install
      - save_cache:
          key: npm-dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: Validate Node.js Formatting
          command: "[ -z \"$(node_modules/.bin/prettier --list-different 'test/**/*.js')\" ] || { node_modules/.bin/prettier --list-different 'test/**/*.js'; exit 1; }"

  deploy:
    docker:
      - image: hashicorp/terraform
    steps:
      - checkout
      - run:
          name: Install Alpine dependencies
          command: apk add bash jq
      - run:
          name: Initialize Terraform
          command: terraform init
      - run:
          name: Import State
          command: terraform import fastly_service_v1.secure_domain_redirect $FASTLY_SERVICE_ID
      - run:
          name: Deploy
          command: .circleci/do-exclusively.sh --branch master terraform apply

  test:
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - restore_cache:
          key: npm-dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: npm install
      - save_cache:
          key: npm-dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: Run Smoke Tests
          command: npm test

workflows:
  version: 2
  deploy:
    jobs:
      - validate_terraform
      - validate_node

      - deploy:
          requires:
            - validate_terraform
            - validate_node
          filters:
            branches:
              only: master

      - test:
          requires:
            - deploy
          filters:
            branches:
              only: master
